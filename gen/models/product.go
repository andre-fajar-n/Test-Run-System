// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Product product
//
// swagger:model product
type Product struct {

	// id
	// Required: true
	ID *uint64 `json:"id"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at"`

	// deleted at
	// Format: date-time
	DeletedAt strfmt.DateTime `json:"deleted_at"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at"`

	// created by
	CreatedBy string `json:"created_by"`

	// deleted by
	DeletedBy string `json:"deleted_by"`

	// updated by
	UpdatedBy string `json:"updated_by"`

	// expiry date
	// Format: date-time
	ExpiryDate strfmt.DateTime `json:"expiry_date,omitempty"`

	// name
	Name string `json:"name"`

	// stock
	Stock uint64 `json:"stock,omitempty"`

	// version
	Version uint64 `json:"version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Product) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID *uint64 `json:"id"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ID = dataAO0.ID

	// AO1
	var dataAO1 struct {
		CreatedAt strfmt.DateTime `json:"created_at"`

		DeletedAt strfmt.DateTime `json:"deleted_at"`

		UpdatedAt strfmt.DateTime `json:"updated_at"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CreatedAt = dataAO1.CreatedAt

	m.DeletedAt = dataAO1.DeletedAt

	m.UpdatedAt = dataAO1.UpdatedAt

	// AO2
	var dataAO2 struct {
		CreatedBy string `json:"created_by"`

		DeletedBy string `json:"deleted_by"`

		UpdatedBy string `json:"updated_by"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.CreatedBy = dataAO2.CreatedBy

	m.DeletedBy = dataAO2.DeletedBy

	m.UpdatedBy = dataAO2.UpdatedBy

	// AO3
	var dataAO3 struct {
		ExpiryDate strfmt.DateTime `json:"expiry_date,omitempty"`

		Name string `json:"name"`

		Stock uint64 `json:"stock,omitempty"`

		Version uint64 `json:"version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO3); err != nil {
		return err
	}

	m.ExpiryDate = dataAO3.ExpiryDate

	m.Name = dataAO3.Name

	m.Stock = dataAO3.Stock

	m.Version = dataAO3.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Product) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	var dataAO0 struct {
		ID *uint64 `json:"id"`
	}

	dataAO0.ID = m.ID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		CreatedAt strfmt.DateTime `json:"created_at"`

		DeletedAt strfmt.DateTime `json:"deleted_at"`

		UpdatedAt strfmt.DateTime `json:"updated_at"`
	}

	dataAO1.CreatedAt = m.CreatedAt

	dataAO1.DeletedAt = m.DeletedAt

	dataAO1.UpdatedAt = m.UpdatedAt

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	var dataAO2 struct {
		CreatedBy string `json:"created_by"`

		DeletedBy string `json:"deleted_by"`

		UpdatedBy string `json:"updated_by"`
	}

	dataAO2.CreatedBy = m.CreatedBy

	dataAO2.DeletedBy = m.DeletedBy

	dataAO2.UpdatedBy = m.UpdatedBy

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	var dataAO3 struct {
		ExpiryDate strfmt.DateTime `json:"expiry_date,omitempty"`

		Name string `json:"name"`

		Stock uint64 `json:"stock,omitempty"`

		Version uint64 `json:"version,omitempty"`
	}

	dataAO3.ExpiryDate = m.ExpiryDate

	dataAO3.Name = m.Name

	dataAO3.Stock = m.Stock

	dataAO3.Version = m.Version

	jsonDataAO3, errAO3 := swag.WriteJSON(dataAO3)
	if errAO3 != nil {
		return nil, errAO3
	}
	_parts = append(_parts, jsonDataAO3)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this product
func (m *Product) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Product) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateDeletedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted_at", "body", "date-time", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateExpiryDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpiryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expiry_date", "body", "date-time", m.ExpiryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this product based on context it is used
func (m *Product) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Product) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Product) UnmarshalBinary(b []byte) error {
	var res Product
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
