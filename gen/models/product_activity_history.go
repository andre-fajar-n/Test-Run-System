// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductActivityHistory product activity history
//
// swagger:model productActivityHistory
type ProductActivityHistory struct {

	// id
	// Required: true
	ID *uint64 `json:"id"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at"`

	// created by
	CreatedBy string `json:"created_by"`

	// note
	Note string `json:"note,omitempty"`

	// product
	Product struct {

		// id
		// Required: true
		ID *uint64 `json:"id"`

		// created at
		// Format: date-time
		CreatedAt *strfmt.DateTime `json:"created_at" gorm:"column:created_at"`

		// deleted at
		// Format: date-time
		DeletedAt *strfmt.DateTime `json:"deleted_at" gorm:"column:deleted_at"`

		// updated at
		// Format: date-time
		UpdatedAt *strfmt.DateTime `json:"updated_at" gorm:"column:updated_at"`

		// created by
		CreatedBy string `json:"created_by"`

		// deleted by
		DeletedBy string `json:"deleted_by"`

		// updated by
		UpdatedBy string `json:"updated_by"`

		// expiry date
		// Format: date-time
		ExpiryDate *strfmt.DateTime `json:"expiry_date"`

		// name
		Name string `json:"name"`

		// stock
		Stock uint64 `json:"stock,omitempty"`

		// user
		User struct {

			// id
			// Required: true
			ID *uint64 `json:"id"`

			// created at
			// Format: date-time
			CreatedAt *strfmt.DateTime `json:"created_at" gorm:"column:created_at"`

			// deleted at
			// Format: date-time
			DeletedAt *strfmt.DateTime `json:"deleted_at" gorm:"column:deleted_at"`

			// updated at
			// Format: date-time
			UpdatedAt *strfmt.DateTime `json:"updated_at" gorm:"column:updated_at"`

			// password
			Password string `json:"password"`

			// username
			Username string `json:"username"`
		} `json:"user,omitempty"`

		// user id
		UserID uint64 `json:"user_id,omitempty"`

		// version
		Version uint64 `json:"version,omitempty"`
	} `json:"product,omitempty"`

	// product id
	ProductID uint64 `json:"product_id,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ProductActivityHistory) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID *uint64 `json:"id"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ID = dataAO0.ID

	// AO1
	var dataAO1 struct {
		CreatedAt strfmt.DateTime `json:"created_at"`

		CreatedBy string `json:"created_by"`

		Note string `json:"note,omitempty"`

		Product struct {

			// id
			// Required: true
			ID *uint64 `json:"id"`

			// created at
			// Format: date-time
			CreatedAt *strfmt.DateTime `json:"created_at" gorm:"column:created_at"`

			// deleted at
			// Format: date-time
			DeletedAt *strfmt.DateTime `json:"deleted_at" gorm:"column:deleted_at"`

			// updated at
			// Format: date-time
			UpdatedAt *strfmt.DateTime `json:"updated_at" gorm:"column:updated_at"`

			// created by
			CreatedBy string `json:"created_by"`

			// deleted by
			DeletedBy string `json:"deleted_by"`

			// updated by
			UpdatedBy string `json:"updated_by"`

			// expiry date
			// Format: date-time
			ExpiryDate *strfmt.DateTime `json:"expiry_date"`

			// name
			Name string `json:"name"`

			// stock
			Stock uint64 `json:"stock,omitempty"`

			// user
			User struct {

				// id
				// Required: true
				ID *uint64 `json:"id"`

				// created at
				// Format: date-time
				CreatedAt *strfmt.DateTime `json:"created_at" gorm:"column:created_at"`

				// deleted at
				// Format: date-time
				DeletedAt *strfmt.DateTime `json:"deleted_at" gorm:"column:deleted_at"`

				// updated at
				// Format: date-time
				UpdatedAt *strfmt.DateTime `json:"updated_at" gorm:"column:updated_at"`

				// password
				Password string `json:"password"`

				// username
				Username string `json:"username"`
			} `json:"user,omitempty"`

			// user id
			UserID uint64 `json:"user_id,omitempty"`

			// version
			Version uint64 `json:"version,omitempty"`
		} `json:"product,omitempty"`

		ProductID uint64 `json:"product_id,omitempty"`

		Type string `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CreatedAt = dataAO1.CreatedAt

	m.CreatedBy = dataAO1.CreatedBy

	m.Note = dataAO1.Note

	m.Product = dataAO1.Product

	m.ProductID = dataAO1.ProductID

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ProductActivityHistory) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID *uint64 `json:"id"`
	}

	dataAO0.ID = m.ID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		CreatedAt strfmt.DateTime `json:"created_at"`

		CreatedBy string `json:"created_by"`

		Note string `json:"note,omitempty"`

		Product struct {

			// id
			// Required: true
			ID *uint64 `json:"id"`

			// created at
			// Format: date-time
			CreatedAt *strfmt.DateTime `json:"created_at" gorm:"column:created_at"`

			// deleted at
			// Format: date-time
			DeletedAt *strfmt.DateTime `json:"deleted_at" gorm:"column:deleted_at"`

			// updated at
			// Format: date-time
			UpdatedAt *strfmt.DateTime `json:"updated_at" gorm:"column:updated_at"`

			// created by
			CreatedBy string `json:"created_by"`

			// deleted by
			DeletedBy string `json:"deleted_by"`

			// updated by
			UpdatedBy string `json:"updated_by"`

			// expiry date
			// Format: date-time
			ExpiryDate *strfmt.DateTime `json:"expiry_date"`

			// name
			Name string `json:"name"`

			// stock
			Stock uint64 `json:"stock,omitempty"`

			// user
			User struct {

				// id
				// Required: true
				ID *uint64 `json:"id"`

				// created at
				// Format: date-time
				CreatedAt *strfmt.DateTime `json:"created_at" gorm:"column:created_at"`

				// deleted at
				// Format: date-time
				DeletedAt *strfmt.DateTime `json:"deleted_at" gorm:"column:deleted_at"`

				// updated at
				// Format: date-time
				UpdatedAt *strfmt.DateTime `json:"updated_at" gorm:"column:updated_at"`

				// password
				Password string `json:"password"`

				// username
				Username string `json:"username"`
			} `json:"user,omitempty"`

			// user id
			UserID uint64 `json:"user_id,omitempty"`

			// version
			Version uint64 `json:"version,omitempty"`
		} `json:"product,omitempty"`

		ProductID uint64 `json:"product_id,omitempty"`

		Type string `json:"type,omitempty"`
	}

	dataAO1.CreatedAt = m.CreatedAt

	dataAO1.CreatedBy = m.CreatedBy

	dataAO1.Note = m.Note

	dataAO1.Product = m.Product

	dataAO1.ProductID = m.ProductID

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this product activity history
func (m *ProductActivityHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductActivityHistory) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProductActivityHistory) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductActivityHistory) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if err := validate.Required("product"+"."+"id", "body", m.Product.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("product"+"."+"created_at", "body", "date-time", m.Product.CreatedAt.String(), formats); err != nil {
		return err
	}

	if err := validate.FormatOf("product"+"."+"deleted_at", "body", "date-time", m.Product.DeletedAt.String(), formats); err != nil {
		return err
	}

	if err := validate.FormatOf("product"+"."+"updated_at", "body", "date-time", m.Product.UpdatedAt.String(), formats); err != nil {
		return err
	}

	if err := validate.FormatOf("product"+"."+"expiry_date", "body", "date-time", m.Product.ExpiryDate.String(), formats); err != nil {
		return err
	}

	if err := validate.Required("product"+"."+"user"+"."+"id", "body", m.Product.User.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("product"+"."+"user"+"."+"created_at", "body", "date-time", m.Product.User.CreatedAt.String(), formats); err != nil {
		return err
	}

	if err := validate.FormatOf("product"+"."+"user"+"."+"deleted_at", "body", "date-time", m.Product.User.DeletedAt.String(), formats); err != nil {
		return err
	}

	if err := validate.FormatOf("product"+"."+"user"+"."+"updated_at", "body", "date-time", m.Product.User.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this product activity history based on context it is used
func (m *ProductActivityHistory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductActivityHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductActivityHistory) UnmarshalBinary(b []byte) error {
	var res ProductActivityHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
