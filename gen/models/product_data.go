// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductData product data
//
// swagger:model productData
type ProductData struct {

	// expiry date
	// Format: date-time
	ExpiryDate strfmt.DateTime `json:"expiry_date,omitempty"`

	// name
	Name string `json:"name"`

	// stock
	Stock uint64 `json:"stock,omitempty"`

	// version
	Version uint64 `json:"version,omitempty"`
}

// Validate validates this product data
func (m *ProductData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductData) validateExpiryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expiry_date", "body", "date-time", m.ExpiryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this product data based on context it is used
func (m *ProductData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductData) UnmarshalBinary(b []byte) error {
	var res ProductData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
