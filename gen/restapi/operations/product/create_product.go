// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"testrunsystem/gen/models"
)

// CreateProductHandlerFunc turns a function with the right signature into a create product handler
type CreateProductHandlerFunc func(CreateProductParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateProductHandlerFunc) Handle(params CreateProductParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateProductHandler interface for that can handle valid create product params
type CreateProductHandler interface {
	Handle(CreateProductParams, *models.Principal) middleware.Responder
}

// NewCreateProduct creates a new http.Handler for the create product operation
func NewCreateProduct(ctx *middleware.Context, handler CreateProductHandler) *CreateProduct {
	return &CreateProduct{Context: ctx, Handler: handler}
}

/*
	CreateProduct swagger:route POST /v1/product product createProduct

# Create New

Create new product
*/
type CreateProduct struct {
	Context *middleware.Context
	Handler CreateProductHandler
}

func (o *CreateProduct) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateProductParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateProductBody create product body
//
// swagger:model CreateProductBody
type CreateProductBody struct {

	// format date DD-MM-YYYY
	// Pattern: ^(0[1-9]|[12][0-9]|3[01])[- -.](0[1-9]|1[012])[- /.](19|20)\d\d$
	ExpiryDate string `json:"expiry_date,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// stock
	// Required: true
	// Minimum: 1
	Stock *uint64 `json:"stock"`
}

// Validate validates this create product body
func (o *CreateProductBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateProductBody) validateExpiryDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpiryDate) { // not required
		return nil
	}

	if err := validate.Pattern("data"+"."+"expiry_date", "body", o.ExpiryDate, `^(0[1-9]|[12][0-9]|3[01])[- -.](0[1-9]|1[012])[- /.](19|20)\d\d$`); err != nil {
		return err
	}

	return nil
}

func (o *CreateProductBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateProductBody) validateStock(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"stock", "body", o.Stock); err != nil {
		return err
	}

	if err := validate.MinimumUint("data"+"."+"stock", "body", *o.Stock, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create product body based on context it is used
func (o *CreateProductBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateProductBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProductBody) UnmarshalBinary(b []byte) error {
	var res CreateProductBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateProductCreatedBody create product created body
//
// swagger:model CreateProductCreatedBody
type CreateProductCreatedBody struct {

	// message
	Message string `json:"message,omitempty"`

	// product id
	ProductID uint64 `json:"product_id,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateProductCreatedBody) UnmarshalJSON(raw []byte) error {
	// CreateProductCreatedBodyAO0
	var dataCreateProductCreatedBodyAO0 struct {
		Message string `json:"message,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataCreateProductCreatedBodyAO0); err != nil {
		return err
	}

	o.Message = dataCreateProductCreatedBodyAO0.Message

	// CreateProductCreatedBodyAO1
	var dataCreateProductCreatedBodyAO1 struct {
		ProductID uint64 `json:"product_id,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataCreateProductCreatedBodyAO1); err != nil {
		return err
	}

	o.ProductID = dataCreateProductCreatedBodyAO1.ProductID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateProductCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataCreateProductCreatedBodyAO0 struct {
		Message string `json:"message,omitempty"`
	}

	dataCreateProductCreatedBodyAO0.Message = o.Message

	jsonDataCreateProductCreatedBodyAO0, errCreateProductCreatedBodyAO0 := swag.WriteJSON(dataCreateProductCreatedBodyAO0)
	if errCreateProductCreatedBodyAO0 != nil {
		return nil, errCreateProductCreatedBodyAO0
	}
	_parts = append(_parts, jsonDataCreateProductCreatedBodyAO0)
	var dataCreateProductCreatedBodyAO1 struct {
		ProductID uint64 `json:"product_id,omitempty"`
	}

	dataCreateProductCreatedBodyAO1.ProductID = o.ProductID

	jsonDataCreateProductCreatedBodyAO1, errCreateProductCreatedBodyAO1 := swag.WriteJSON(dataCreateProductCreatedBodyAO1)
	if errCreateProductCreatedBodyAO1 != nil {
		return nil, errCreateProductCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataCreateProductCreatedBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create product created body
func (o *CreateProductCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this create product created body based on context it is used
func (o *CreateProductCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateProductCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProductCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateProductCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateProductDefaultBody create product default body
//
// swagger:model CreateProductDefaultBody
type CreateProductDefaultBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// message
	// Example: error
	Message string `json:"message,omitempty"`
}

// Validate validates this create product default body
func (o *CreateProductDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create product default body based on context it is used
func (o *CreateProductDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateProductDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProductDefaultBody) UnmarshalBinary(b []byte) error {
	var res CreateProductDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
