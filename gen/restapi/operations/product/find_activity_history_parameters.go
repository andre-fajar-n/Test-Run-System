// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewFindActivityHistoryParams creates a new FindActivityHistoryParams object
// with the default values initialized.
func NewFindActivityHistoryParams() FindActivityHistoryParams {

	var (
		// initialize parameters with default values

		limitDefault     = int64(10)
		orderDefault     = string("created_at")
		pageDefault      = int64(1)
		productIDDefault = uint64(1)
		sortDefault      = string("desc")
	)

	return FindActivityHistoryParams{
		Limit: &limitDefault,

		Order: &orderDefault,

		Page: &pageDefault,

		ProductID: productIDDefault,

		Sort: &sortDefault,
	}
}

// FindActivityHistoryParams contains all the bound params for the find activity history operation
// typically these are obtained from a http.Request
//
// swagger:parameters findActivityHistory
type FindActivityHistoryParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*default parameter for limit pagination
	  In: query
	  Default: 10
	*/
	Limit *int64
	/*default parameter for order pagination
	  In: query
	  Default: "created_at"
	*/
	Order *string
	/*default parameter for pagination page
	  In: query
	  Default: 1
	*/
	Page *int64
	/*product_id
	  Required: true
	  In: path
	  Default: 1
	*/
	ProductID uint64
	/*default parameter for sort pagination
	  In: query
	  Default: "desc"
	*/
	Sort *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFindActivityHistoryParams() beforehand.
func (o *FindActivityHistoryParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrder, qhkOrder, _ := qs.GetOK("order")
	if err := o.bindOrder(qOrder, qhkOrder, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	rProductID, rhkProductID, _ := route.Params.GetOK("product_id")
	if err := o.bindProductID(rProductID, rhkProductID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSort, qhkSort, _ := qs.GetOK("sort")
	if err := o.bindSort(qSort, qhkSort, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *FindActivityHistoryParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewFindActivityHistoryParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindOrder binds and validates parameter Order from query.
func (o *FindActivityHistoryParams) bindOrder(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewFindActivityHistoryParams()
		return nil
	}
	o.Order = &raw

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *FindActivityHistoryParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewFindActivityHistoryParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = &value

	return nil
}

// bindProductID binds and validates parameter ProductID from path.
func (o *FindActivityHistoryParams) bindProductID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertUint64(raw)
	if err != nil {
		return errors.InvalidType("product_id", "path", "uint64", raw)
	}
	o.ProductID = value

	return nil
}

// bindSort binds and validates parameter Sort from query.
func (o *FindActivityHistoryParams) bindSort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewFindActivityHistoryParams()
		return nil
	}
	o.Sort = &raw

	if err := o.validateSort(formats); err != nil {
		return err
	}

	return nil
}

// validateSort carries on validations for parameter Sort
func (o *FindActivityHistoryParams) validateSort(formats strfmt.Registry) error {

	if err := validate.EnumCase("sort", "query", *o.Sort, []interface{}{"asc", "desc"}, true); err != nil {
		return err
	}

	return nil
}
