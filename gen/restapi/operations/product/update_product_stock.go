// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateProductStockHandlerFunc turns a function with the right signature into a update product stock handler
type UpdateProductStockHandlerFunc func(UpdateProductStockParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateProductStockHandlerFunc) Handle(params UpdateProductStockParams) middleware.Responder {
	return fn(params)
}

// UpdateProductStockHandler interface for that can handle valid update product stock params
type UpdateProductStockHandler interface {
	Handle(UpdateProductStockParams) middleware.Responder
}

// NewUpdateProductStock creates a new http.Handler for the update product stock operation
func NewUpdateProductStock(ctx *middleware.Context, handler UpdateProductStockHandler) *UpdateProductStock {
	return &UpdateProductStock{Context: ctx, Handler: handler}
}

/*
	UpdateProductStock swagger:route PUT /v1/product/{product_id}/stock product updateProductStock

# Update Stock

Increasing/decreasing product stock
*/
type UpdateProductStock struct {
	Context *middleware.Context
	Handler UpdateProductStockHandler
}

func (o *UpdateProductStock) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateProductStockParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateProductStockBody update product stock body
//
// swagger:model UpdateProductStockBody
type UpdateProductStockBody struct {

	// stock
	// Required: true
	// Minimum: 0
	Stock *uint64 `json:"stock"`
}

// Validate validates this update product stock body
func (o *UpdateProductStockBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateProductStockBody) validateStock(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"stock", "body", o.Stock); err != nil {
		return err
	}

	if err := validate.MinimumUint("data"+"."+"stock", "body", *o.Stock, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update product stock body based on context it is used
func (o *UpdateProductStockBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateProductStockBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateProductStockBody) UnmarshalBinary(b []byte) error {
	var res UpdateProductStockBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateProductStockCreatedBody update product stock created body
//
// swagger:model UpdateProductStockCreatedBody
type UpdateProductStockCreatedBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *UpdateProductStockCreatedBody) UnmarshalJSON(raw []byte) error {
	// UpdateProductStockCreatedBodyAO0
	var dataUpdateProductStockCreatedBodyAO0 struct {
		Message string `json:"message,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataUpdateProductStockCreatedBodyAO0); err != nil {
		return err
	}

	o.Message = dataUpdateProductStockCreatedBodyAO0.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o UpdateProductStockCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataUpdateProductStockCreatedBodyAO0 struct {
		Message string `json:"message,omitempty"`
	}

	dataUpdateProductStockCreatedBodyAO0.Message = o.Message

	jsonDataUpdateProductStockCreatedBodyAO0, errUpdateProductStockCreatedBodyAO0 := swag.WriteJSON(dataUpdateProductStockCreatedBodyAO0)
	if errUpdateProductStockCreatedBodyAO0 != nil {
		return nil, errUpdateProductStockCreatedBodyAO0
	}
	_parts = append(_parts, jsonDataUpdateProductStockCreatedBodyAO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this update product stock created body
func (o *UpdateProductStockCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this update product stock created body based on context it is used
func (o *UpdateProductStockCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateProductStockCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateProductStockCreatedBody) UnmarshalBinary(b []byte) error {
	var res UpdateProductStockCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateProductStockDefaultBody update product stock default body
//
// swagger:model UpdateProductStockDefaultBody
type UpdateProductStockDefaultBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// message
	// Example: error
	Message string `json:"message,omitempty"`
}

// Validate validates this update product stock default body
func (o *UpdateProductStockDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update product stock default body based on context it is used
func (o *UpdateProductStockDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateProductStockDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateProductStockDefaultBody) UnmarshalBinary(b []byte) error {
	var res UpdateProductStockDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
