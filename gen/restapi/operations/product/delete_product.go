// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"testrunsystem/gen/models"
)

// DeleteProductHandlerFunc turns a function with the right signature into a delete product handler
type DeleteProductHandlerFunc func(DeleteProductParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteProductHandlerFunc) Handle(params DeleteProductParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteProductHandler interface for that can handle valid delete product params
type DeleteProductHandler interface {
	Handle(DeleteProductParams, *models.Principal) middleware.Responder
}

// NewDeleteProduct creates a new http.Handler for the delete product operation
func NewDeleteProduct(ctx *middleware.Context, handler DeleteProductHandler) *DeleteProduct {
	return &DeleteProduct{Context: ctx, Handler: handler}
}

/*
	DeleteProduct swagger:route DELETE /v1/product/{product_id} product deleteProduct

# Delete

Delete product
*/
type DeleteProduct struct {
	Context *middleware.Context
	Handler DeleteProductHandler
}

func (o *DeleteProduct) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteProductParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteProductCreatedBody delete product created body
//
// swagger:model DeleteProductCreatedBody
type DeleteProductCreatedBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete product created body
func (o *DeleteProductCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete product created body based on context it is used
func (o *DeleteProductCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteProductCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteProductCreatedBody) UnmarshalBinary(b []byte) error {
	var res DeleteProductCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteProductDefaultBody delete product default body
//
// swagger:model DeleteProductDefaultBody
type DeleteProductDefaultBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// message
	// Example: error
	Message string `json:"message,omitempty"`
}

// Validate validates this delete product default body
func (o *DeleteProductDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete product default body based on context it is used
func (o *DeleteProductDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteProductDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteProductDefaultBody) UnmarshalBinary(b []byte) error {
	var res DeleteProductDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
