// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateProductHandlerFunc turns a function with the right signature into a update product handler
type UpdateProductHandlerFunc func(UpdateProductParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateProductHandlerFunc) Handle(params UpdateProductParams) middleware.Responder {
	return fn(params)
}

// UpdateProductHandler interface for that can handle valid update product params
type UpdateProductHandler interface {
	Handle(UpdateProductParams) middleware.Responder
}

// NewUpdateProduct creates a new http.Handler for the update product operation
func NewUpdateProduct(ctx *middleware.Context, handler UpdateProductHandler) *UpdateProduct {
	return &UpdateProduct{Context: ctx, Handler: handler}
}

/*
	UpdateProduct swagger:route PUT /v1/product/{product_id} product updateProduct

# Update

Update existing product
*/
type UpdateProduct struct {
	Context *middleware.Context
	Handler UpdateProductHandler
}

func (o *UpdateProduct) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateProductParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateProductBody update product body
//
// swagger:model UpdateProductBody
type UpdateProductBody struct {

	// format date DD-MM-YYYY
	// Pattern: ^(0[1-9]|[12][0-9]|3[01])[- -.](0[1-9]|1[012])[- /.](19|20)\d\d$
	ExpiryDate string `json:"expiry_date,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this update product body
func (o *UpdateProductBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateProductBody) validateExpiryDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpiryDate) { // not required
		return nil
	}

	if err := validate.Pattern("data"+"."+"expiry_date", "body", o.ExpiryDate, `^(0[1-9]|[12][0-9]|3[01])[- -.](0[1-9]|1[012])[- /.](19|20)\d\d$`); err != nil {
		return err
	}

	return nil
}

func (o *UpdateProductBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update product body based on context it is used
func (o *UpdateProductBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateProductBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateProductBody) UnmarshalBinary(b []byte) error {
	var res UpdateProductBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateProductCreatedBody update product created body
//
// swagger:model UpdateProductCreatedBody
type UpdateProductCreatedBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *UpdateProductCreatedBody) UnmarshalJSON(raw []byte) error {
	// UpdateProductCreatedBodyAO0
	var dataUpdateProductCreatedBodyAO0 struct {
		Message string `json:"message,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataUpdateProductCreatedBodyAO0); err != nil {
		return err
	}

	o.Message = dataUpdateProductCreatedBodyAO0.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o UpdateProductCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataUpdateProductCreatedBodyAO0 struct {
		Message string `json:"message,omitempty"`
	}

	dataUpdateProductCreatedBodyAO0.Message = o.Message

	jsonDataUpdateProductCreatedBodyAO0, errUpdateProductCreatedBodyAO0 := swag.WriteJSON(dataUpdateProductCreatedBodyAO0)
	if errUpdateProductCreatedBodyAO0 != nil {
		return nil, errUpdateProductCreatedBodyAO0
	}
	_parts = append(_parts, jsonDataUpdateProductCreatedBodyAO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this update product created body
func (o *UpdateProductCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this update product created body based on context it is used
func (o *UpdateProductCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateProductCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateProductCreatedBody) UnmarshalBinary(b []byte) error {
	var res UpdateProductCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UpdateProductDefaultBody update product default body
//
// swagger:model UpdateProductDefaultBody
type UpdateProductDefaultBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// message
	// Example: error
	Message string `json:"message,omitempty"`
}

// Validate validates this update product default body
func (o *UpdateProductDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update product default body based on context it is used
func (o *UpdateProductDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateProductDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateProductDefaultBody) UnmarshalBinary(b []byte) error {
	var res UpdateProductDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
