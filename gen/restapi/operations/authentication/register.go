// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterHandlerFunc turns a function with the right signature into a register handler
type RegisterHandlerFunc func(RegisterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterHandlerFunc) Handle(params RegisterParams) middleware.Responder {
	return fn(params)
}

// RegisterHandler interface for that can handle valid register params
type RegisterHandler interface {
	Handle(RegisterParams) middleware.Responder
}

// NewRegister creates a new http.Handler for the register operation
func NewRegister(ctx *middleware.Context, handler RegisterHandler) *Register {
	return &Register{Context: ctx, Handler: handler}
}

/*
	Register swagger:route POST /v1/register authentication register

# Register

Register user
*/
type Register struct {
	Context *middleware.Context
	Handler RegisterHandler
}

func (o *Register) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRegisterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RegisterBody register body
//
// swagger:model RegisterBody
type RegisterBody struct {

	// password
	// Required: true
	// Min Length: 8
	Password *string `json:"password"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this register body
func (o *RegisterBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RegisterBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	if err := validate.MinLength("data"+"."+"password", "body", *o.Password, 8); err != nil {
		return err
	}

	return nil
}

func (o *RegisterBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this register body based on context it is used
func (o *RegisterBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterBody) UnmarshalBinary(b []byte) error {
	var res RegisterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterCreatedBody register created body
//
// swagger:model RegisterCreatedBody
type RegisterCreatedBody struct {

	// message
	Message string `json:"message,omitempty"`

	// user id
	UserID uint64 `json:"user_id,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RegisterCreatedBody) UnmarshalJSON(raw []byte) error {
	// RegisterCreatedBodyAO0
	var dataRegisterCreatedBodyAO0 struct {
		Message string `json:"message,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataRegisterCreatedBodyAO0); err != nil {
		return err
	}

	o.Message = dataRegisterCreatedBodyAO0.Message

	// RegisterCreatedBodyAO1
	var dataRegisterCreatedBodyAO1 struct {
		UserID uint64 `json:"user_id,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataRegisterCreatedBodyAO1); err != nil {
		return err
	}

	o.UserID = dataRegisterCreatedBodyAO1.UserID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RegisterCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataRegisterCreatedBodyAO0 struct {
		Message string `json:"message,omitempty"`
	}

	dataRegisterCreatedBodyAO0.Message = o.Message

	jsonDataRegisterCreatedBodyAO0, errRegisterCreatedBodyAO0 := swag.WriteJSON(dataRegisterCreatedBodyAO0)
	if errRegisterCreatedBodyAO0 != nil {
		return nil, errRegisterCreatedBodyAO0
	}
	_parts = append(_parts, jsonDataRegisterCreatedBodyAO0)
	var dataRegisterCreatedBodyAO1 struct {
		UserID uint64 `json:"user_id,omitempty"`
	}

	dataRegisterCreatedBodyAO1.UserID = o.UserID

	jsonDataRegisterCreatedBodyAO1, errRegisterCreatedBodyAO1 := swag.WriteJSON(dataRegisterCreatedBodyAO1)
	if errRegisterCreatedBodyAO1 != nil {
		return nil, errRegisterCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataRegisterCreatedBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this register created body
func (o *RegisterCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this register created body based on context it is used
func (o *RegisterCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterCreatedBody) UnmarshalBinary(b []byte) error {
	var res RegisterCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterDefaultBody register default body
//
// swagger:model RegisterDefaultBody
type RegisterDefaultBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// message
	// Example: error
	Message string `json:"message,omitempty"`
}

// Validate validates this register default body
func (o *RegisterDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this register default body based on context it is used
func (o *RegisterDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RegisterDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterDefaultBody) UnmarshalBinary(b []byte) error {
	var res RegisterDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
